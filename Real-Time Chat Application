"""
Single-file Flask + Flask-SocketIO real-time chat application.

Features:
- User registration & login (Flask-Login)
- Create / join chat rooms
- Private 1:1 conversations (room per pair)
- Real-time messaging with Flask-SocketIO (WebSocket/Fallbacks)
- Chat history persisted in SQLite
- Presence indicators (who's online) and typing notifications
- File upload support for images/documents (saved to static/uploads)

Optional features implemented:
- Chat history: messages stored in DB and loaded when joining a room
- Notifications: simple 'message' events used as notifications
- Presence: online users tracked in memory per socket
- File sharing: upload endpoint + messages referencing uploaded files

How to run locally (development):
1. Create & activate a virtualenv
   python -m venv venv
   source venv/bin/activate   # macOS/Linux
   venv\\Scripts\\activate  # Windows

2. Install dependencies:
   pip install Flask Flask-SocketIO flask-login Flask-WTF Flask-SQLAlchemy python-dotenv eventlet

3. Run:
   python flask_socketio_chat.py

4. Open http://127.0.0.1:5000

Notes:
- This is a demo app. For production: use HTTPS, a message broker (Redis) for Socket.IO, persistent file storage (S3), user input sanitization, CORS & rate-limiting.
- The app uses eventlet by default for Socket.IO server; you can switch to gevent or an async worker.

"""

import os
import uuid
from datetime import datetime
from flask import Flask, render_template_string, redirect, url_for, request, flash, send_from_directory, abort, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField, FileField
from wtforms.validators import DataRequired, Email, Length, EqualTo, ValidationError, Optional
from werkzeug.security import generate_password_hash, check_password_hash
from werkzeug.utils import secure_filename
from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user
from flask_socketio import SocketIO, join_room, leave_room, emit

BASE_DIR = os.path.abspath(os.path.dirname(__file__))
UPLOAD_FOLDER = os.path.join(BASE_DIR, 'static', 'uploads')
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

app = Flask(__name__)
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'dev-secret-key-change-me')
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///' + os.path.join(BASE_DIR, 'chat.db')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['ALLOWED_EXTENSIONS'] = {'png', 'jpg', 'jpeg', 'gif', 'pdf', 'txt', 'docx'}

ALLOWED = app.config['ALLOWED_EXTENSIONS']

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED

# Use eventlet for websocket support in development
socketio = SocketIO(app, cors_allowed_origins="*", async_mode='eventlet')

db = SQLAlchemy(app)
login_manager = LoginManager(app)
login_manager.login_view = 'login'

# -----------------
# Models
# -----------------
class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(120), unique=True, nullable=False)
    name = db.Column(db.String(120), nullable=True)
    password_hash = db.Column(db.String(256), nullable=False)

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

class Room(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(120), nullable=False)
    is_private = db.Column(db.Boolean, default=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

class Message(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    room = db.Column(db.String(200), nullable=False)  # use room name as identifier
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=True)
    username = db.Column(db.String(120), nullable=True)
    content = db.Column(db.Text, nullable=True)
    file_url = db.Column(db.String(300), nullable=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

# -----------------
# Forms
# -----------------
class RegisterForm(FlaskForm):
    email = StringField('Email', validators=[DataRequired(), Email(), Length(max=120)])
    name = StringField('Name', validators=[Optional(), Length(max=120)])
    password = PasswordField('Password', validators=[DataRequired(), Length(min=6)])
    confirm = PasswordField('Confirm', validators=[DataRequired(), EqualTo('password')])
    submit = SubmitField('Register')
    def validate_email(self, field):
        if User.query.filter_by(email=field.data.lower().strip()).first():
            raise ValidationError('Email already registered.')

class LoginForm(FlaskForm):
    email = StringField('Email', validators=[DataRequired(), Email(), Length(max=120)])
    password = PasswordField('Password', validators=[DataRequired()])
    submit = SubmitField('Login')

class RoomForm(FlaskForm):
    name = StringField('Room name', validators=[DataRequired(), Length(max=120)])
    submit = SubmitField('Create')

class UploadForm(FlaskForm):
    file = FileField('File', validators=[DataRequired()])
    submit = SubmitField('Upload')

# -----------------
# Auth
# -----------------
@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

@app.before_first_request
def create_tables():
    db.create_all()

# -----------------
# Presence tracking
# -----------------
# Map: room -> set of usernames
online_users = {}  # {room_name: {sid: username}}
user_sid_map = {}  # sid -> username

# -----------------
# Routes
# -----------------
@app.route('/')
def index():
    rooms = Room.query.filter_by(is_private=False).all()
    return render_template_string(INDEX_HTML, rooms=rooms)

@app.route('/register', methods=['GET', 'POST'])
def register():
    form = RegisterForm()
    if form.validate_on_submit():
        u = User(email=form.email.data.lower().strip(), name=form.name.data.strip())
        u.set_password(form.password.data)
        db.session.add(u)
        db.session.commit()
        flash('Registered. Please log in.', 'success')
        return redirect(url_for('login'))
    return render_template_string(REGISTER_HTML, form=form)

@app.route('/login', methods=['GET', 'POST'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        u = User.query.filter_by(email=form.email.data.lower().strip()).first()
        if u and u.check_password(form.password.data):
            login_user(u)
            flash('Logged in.', 'success')
            return redirect(url_for('index'))
        flash('Invalid credentials', 'danger')
    return render_template_string(LOGIN_HTML, form=form)

@app.route('/logout')
@login_required
def logout():
    logout_user()
    flash('Logged out', 'info')
    return redirect(url_for('index'))

@app.route('/room/create', methods=['GET', 'POST'])
@login_required
def create_room():
    form = RoomForm()
    if form.validate_on_submit():
        r = Room(name=form.name.data.strip(), is_private=False)
        db.session.add(r)
        db.session.commit()
        flash('Room created', 'success')
        return redirect(url_for('index'))
    return render_template_string(CREATE_ROOM_HTML, form=form)

@app.route('/room/<name>')
@login_required
def join_room_page(name):
    # load last 50 messages
    msgs = Message.query.filter_by(room=name).order_by(Message.created_at.asc()).all()
    return render_template_string(ROOM_HTML, room=name, messages=msgs)

@app.route('/uploads/<path:filename>')
def uploaded_file(filename):
    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)

@app.route('/upload', methods=['POST'])
@login_required
def upload_file():
    if 'file' not in request.files:
        return jsonify({'error':'no file'}), 400
    f = request.files['file']
    if f.filename == '':
        return jsonify({'error':'empty filename'}), 400
    if f and allowed_file(f.filename):
        filename = secure_filename(f.filename)
        fname = f"{uuid.uuid4().hex}_{filename}"
        f.save(os.path.join(app.config['UPLOAD_FOLDER'], fname))
        url = url_for('uploaded_file', filename=fname)
        return jsonify({'url': url})
    return jsonify({'error':'file type not allowed'}), 400

# -----------------
# Socket.IO events
# -----------------
@socketio.on('connect')
def on_connect():
    # nothing until authenticated on client side
    print('Client connected', request.sid)

@socketio.on('authenticate')
def on_auth(data):
    # client should send {'user_id': id, 'username': name}
    sid = request.sid
    username = data.get('username')
    user_sid_map[sid] = username
    emit('authenticated', {'sid': sid})

@socketio.on('join')
def on_join(data):
    room = data.get('room')
    username = data.get('username')
    if not room or not username:
        return
    join_room(room)
    online_users.setdefault(room, {})[request.sid] = username
    # broadcast presence update
    emit('user_joined', {'username': username, 'room': room, 'online': list(online_users[room].values())}, room=room)
    print(f"{username} joined {room}")

@socketio.on('leave')
def on_leave(data):
    room = data.get('room')
    username = data.get('username')
    leave_room(room)
    if room in online_users and request.sid in online_users[room]:
        online_users[room].pop(request.sid, None)
        emit('user_left', {'username': username, 'room': room, 'online': list(online_users[room].values())}, room=room)
    print(f"{username} left {room}")

@socketio.on('typing')
def on_typing(data):
    room = data.get('room')
    username = data.get('username')
    emit('typing', {'username': username}, room=room, include_self=False)

@socketio.on('message')
def on_message(data):
    # expected: {'room': room, 'username': username, 'content': text, 'file_url': optional}
    room = data.get('room')
    username = data.get('username')
    content = data.get('content')
    file_url = data.get('file_url')
    if not room or (not content and not file_url):
        return
    # persist
    m = Message(room=room, user_id=None, username=username, content=content, file_url=file_url)
    db.session.add(m)
    db.session.commit()
    payload = {'id': m.id, 'room': room, 'username': username, 'content': content, 'file_url': file_url, 'created_at': m.created_at.strftime('%Y-%m-%d %H:%M:%S')}
    emit('message', payload, room=room)

@socketio.on('private_message')
def on_private(data):
    # private between two users: room name should be unique pair, e.g. pm:alice:bob
    room = data.get('room')
    sender = data.get('username')
    content = data.get('content')
    if not room or not content:
        return
    m = Message(room=room, username=sender, content=content)
    db.session.add(m)
    db.session.commit()
    emit('private_message', {'id': m.id, 'room': room, 'username': sender, 'content': content, 'created_at': m.created_at.strftime('%Y-%m-%d %H:%M:%S')}, room=room)

@socketio.on('disconnect')
def on_disconnect():
    sid = request.sid
    username = user_sid_map.pop(sid, None)
    # remove from all rooms
    for room, d in list(online_users.items()):
        if sid in d:
            d.pop(sid, None)
            emit('user_left', {'username': username, 'room': room, 'online': list(d.values())}, room=room)
    print('Client disconnected', sid)

# -----------------
# Minimal HTML templates (inline for demo)
# -----------------
INDEX_HTML = """
<!doctype html>
<title>Chat</title>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<div class="container py-4">
  <h3>Real-time Chat</h3>
  {% if current_user.is_authenticated %}
    <p>Logged in as {{ current_user.name or current_user.email }} - <a href="{{ url_for('logout') }}">Logout</a></p>
    <a class="btn btn-primary mb-2" href="{{ url_for('create_room') }}">Create room</a>
    <h5>Public rooms</h5>
    <ul>
      {% for r in rooms %}
        <li><a href="{{ url_for('join_room_page', name=r.name) }}">{{ r.name }}</a></li>
      {% else %}
        <li>No rooms yet</li>
      {% endfor %}
    </ul>
  {% else %}
    <p><a href="{{ url_for('login') }}">Login</a> or <a href="{{ url_for('register') }}">Register</a></p>
  {% endif %}
</div>
"""

REGISTER_HTML = """
<!doctype html>
<title>Register</title>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<div class="container py-4">
  <h3>Register</h3>
  <form method="post">
    {{ form.hidden_tag() }}
    <div class="mb-2">{{ form.email.label }} {{ form.email(class_='form-control') }}</div>
    <div class="mb-2">{{ form.name.label }} {{ form.name(class_='form-control') }}</div>
    <div class="mb-2">{{ form.password.label }} {{ form.password(class_='form-control') }}</div>
    <div class="mb-2">{{ form.confirm.label }} {{ form.confirm(class_='form-control') }}</div>
    <button class="btn btn-primary">Register</button>
  </form>
</
